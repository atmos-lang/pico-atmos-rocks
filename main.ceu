^["@/pico/pico.ceu"]   ;; PICO-SDL library

pico-state-set-title("The Battle of Ships")
pico-state-set-size-pixel([1,1])
pico-state-set-size([641,481])
pico-state-set-grid(false)
pico-state-set-auto(false)

val WIN :WH = pico-state-get-size()
pico-state-set-font("tiny.ttf", WIN.h/15)

random-seed()

spawn task {    ;; BACKGROUND
    ;;;
    ;; Spawns a task to draw the background image on every frame.
    ;; We draw at position (0,0), which is the center of the screen.
    ;; By default, the center of the image is anchored at the given position.
    ;; This task is the first to spawn, which makes the background image to
    ;; always be rendered first.
    ;;;
    every :Pico.Draw {
        pico-state-set-image-crop()
        pico-output-draw-image([0,0], "imgs/bg.png")
    }
}

val points = ["0", "0"]

spawn task {    ;; POINTS
    ;;;
    ;; Spawns the players points and place them at the bottom of the screen, in
    ;; opposite sides.
    ;; Points are incremented when the ship of the opponent is destroyed.
    ;; Since points must outlive each individual battle, we spawn them here,
    ;; outside the main game loop.
    ;;;
    val dx = WIN.w / 15
    val y  = (-WIN.h /2 ) + (WIN.h / 15)
    every :Pico.Draw {
        pico-state-set-color-draw([0xFF,0xFF,0xFF,0xFF]);
        pico-output-draw-text([(-WIN.w / 2) + dx, y], points.0)
        pico-output-draw-text([( WIN.w / 2) - dx, y], points.1)
    }
}

spawn task {    ;; MAIN-LOOP
    ;;;
    ;; Starts the main game loop:
    ;;  - Shows the "tap to start" message.
    ;;  - Runs the next battle with the actual gameplay.
    ;;  - Restarts whenever one of the ships is destroyed.
    ;;;
    loop {
        watching :Pico.Key.Dn {     ;; TAP-TO-START
            ;;;
            ;; Spawns the blinking message, and awaits any key press.
            ;;;
            loop {
                watching :500:ms {
                    every :Pico.Draw {
                        pico-state-set-color-draw([0xFF,0xFF,0xFF,0xFF]);
                        pico-output-draw-text([0,0], "= TAP TO START =")
                    }
                }
                await(:500:ms)
            }
        }

        ;; Plays the restart sound.
        pico-output-sound("snds/start.wav")

        ;;;
        ;; Broadcasts pause and resume events to the game:
        ;;  - Pauses on key "P" (event :Hide).
        ;;  - Shows the pause image while paused.
        ;;  - Resumes on key "P" (event :Show).
        ;;;
        spawn task {
            loop {
                await(:Pico.Key.Dn => it.key==:Key-P)
                broadcast(:Show [false]) in :global
                spawn task {
                    every :Pico.Draw {
                        pico-output-draw-image([0,0], "imgs/pause.png")
                    }
                }
                await(:Pico.Key.Dn => it.key==:Key-P)
                broadcast(:Show [true]) in :global
            }
        }

        ;;;
        ;; Pauses and resumes the game when receiving key "P".
        ;; The toggle construct receives two events separated by `->`, and
        ;; controls its nested block as follows:
        ;;  - Initially, the block executes and receives broadcasts normally.
        ;;  - When the first event is received, the block is paused by not
        ;;    receiving any broadcasts.
        ;;  - When the second event is received, the block is resumed and
        ;;    receives broadcasts normally.
        ;;  - When the nested block terminates, the outer toggle as a whole
        ;;    also terminates.
        ;;  - The toggle evaluates to the final value of the block.
        ;;;
        val winner = toggle :Show {
            ;;;
            ;; The "battle block" contains the actual gameplay and holds the
            ;; spaceships and meteors.
            ;; The block returns the winner index (0 or 1), whose points are
            ;; incremented before the next battle.
            ;; Since the block is nested, all dynamic objects are all properly
            ;; released and reallocated after each individual battle.
            ;;;
            ^["battle.ceu"]     ;; includes the battle block
        }

        ;; Increments the winner points.
        set points[winner] = to-number(points[winner]) + 1 --> to-string

        await(:1:s)

        ;;;
        ;; Restarts the main loop.
        ;; Due to lexical memory management, only the points are preserved
        ;; between loop iterations.
        ;; All other data, including those dynamically allocated, are
        ;; guaranteed to be reclaimed after this point, no matter how the
        ;; nested code above is structured.
        ;;;
    }
}

pico-loop ()
