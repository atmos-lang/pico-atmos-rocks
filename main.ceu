^["pico.ceu"]

do {            ;; SCREEN CONFIGURATION
    pico-state-set-title("The Rocks! Game")
    pico-state-set-size-pixel([1,1])
    pico-state-set-size([641,481])
    pico-state-set-grid(false)
    pico-state-set-auto(false)
}

val WIN :WH = pico-state-get-size()
val ROCK-MS = 5000
pico-state-set-font("tiny.ttf", WIN.h/15)
random-seed()

spawn {         ;; BACKGROUND
    ;;;
    ;; Spawns a task to draw the background image on every frame.
    ;; We draw at position (0,0), which is the center of the screen.
    ;; By default, the center of the image is anchored at the given
    ;; position.
    ;; This task is the first to spawn, what makes the background image
    ;; to always be rendered first.
    ;;;
    every :Pico.Draw {
        pico-state-set-image-crop()
        pico-output-draw-image([0,0], "imgs/bg.png")
    }
}

do :unnest {    ;; POINTS
    ;;;
    ;; Spawns the players points and place them at the bottom of the screen, in
    ;; opposite sides.
    ;; Points are incremented when the ship of the opponent is destroyed.
    ;; Since points must outlive each individual battle, we spawn them here,
    ;; outside the nested gameplay.
    ;; The `:unnest` annotation makes all nested variables visible to the outer
    ;; scope, which is useful to group declarations.
    ;;;

    var points-1 = "0"
    var points-2 = "0"

    spawn {
        val dx = WIN.w / 15
        val y  = (-WIN.h /2 ) + (WIN.h / 15)
        val p1 = [(-WIN.w / 2) + dx, y]
        val p2 = [( WIN.w / 2) - dx, y]
        every :Pico.Draw {
            pico-state-set-color-draw([0xFF,0xFF,0xFF,0xFF]);
            pico-output-draw-text(p1, points-1)
            pico-output-draw-text(p2, points-2)
        }
    }
}

spawn {         ;; MAIN-LOOP
    ;;;
    ;; Starts the main game loop:
    ;;  - Shows the "tap to start" message.
    ;;  - Runs the next battle with the actual gameplay.
    ;;  - Restarts whenever one of the ships is destroyed.
    ;;;

    loop {
        awaiting :Pico.Key.Dn {     ;; TAP-TO-START
            ;;;
            ;; Spawns the blinking "= TAP TO START =" message, and awaits any
            ;; key press.
            ;;;
            loop {
                awaiting 500:ms {
                    every :Pico.Draw {
                        pico-state-set-color-draw([0xFF,0xFF,0xFF,0xFF]);
                        pico-output-draw-text([0,0], "= TAP TO START =")
                    }
                }
                await 500:ms
            }
        }

        pico-output-sound("snds/start.wav")

        spawn {
            loop {
                await :Pico.Key.Dn, evt.key==:Key-P
                broadcast in :global, :Hide
                spawn {
                    every :Pico.Draw {
                        pico-output-draw-image([0,0], "imgs/pause.png")
                    }
                }
                await :Pico.Key.Dn, evt.key==:Key-P
                broadcast in :global, :Show
            }
        }

        toggle :Hide -> :Show {
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;; - The "battle block" with the gameplay holds the spaceships,
        ;;   controllers, and all dynamic objects, such as meteors, bonuses,
        ;;   and ship shots.
        ;; This means that they are all properly released/reallocated after
        ;; each individual battle.
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

            ^["battle.ceu"]
        }

        await 1:s
    }
}

pico-loop ()

;;;;
            /*
             * One of the ships was destroyed (ship.ok_killed).
             * The innermost "par/or" terminated.
             */
        /*
         * The "battle block" terminated, the ships, controllers, and all 
         * dynamic items are destroyed.
         * Restart the "main loop" and show the "= TAP TO START =" message 
         * again.
         * The points are kept (they are declated in the outer scope).
         */
    /*
     * The "main loop" never terminates.
     * This "end" is never surpassed.
     */
/* TODO:
 * - PAUSE/IF salva img emostra pause em cima
 * - BONUS_ACCEL
 * - MENU: control-sides, reset-points
 * - start at 1/2 speed of previous match
 */
;;;;
