val METEOR-MS  = 5000   ;; average period to spawn a new meteor
val SHIP-SHOTS = 3      ;; maximum number of simultaneous shots

data :T = [rect:Rect] {
    ;;;
    ;; Describes the data hierarchy :T for the public fields of objects:
    ;;  - They all expose a :Rect object for collision detection.
    ;;  - We distinguish between objects on the left and right (:L and :R).
    ;;;
    :Ship = [] {
        :L = []
        :R = []
    }
    :Shot = [] {
        :L = []
        :R = []
    }
    :Meteor = []
}

task Move-T (rect:Rect, vel:XY) {
    ;;;
    ;; Updates the given `rect` position according to its `vel` speed.
    ;;  - Updates on every :Frame.
    ;;  - Terminates when leaving the screen.
    ;;;
    watching |out-of-screen() {
        every :Pico.Frame {
            val dt = it.ms / 1000
            set rect.pos.x = rect.pos.x + (vel.x * dt)
            set rect.pos.y = rect.pos.y + (vel.y * dt)
        }
    } where {
        func out-of-screen () {
            ifs {
                rect.pos.x < 0     => true
                rect.pos.x > WIN.w => true
                rect.pos.y < 0     => true
                rect.pos.y > WIN.h => true
                else               => false
            }
        }
    }
}

^["ts.ceu"] ;; includes the object tasks

val t = [           ;; holds all spawned shots, limited to a maximum
    tasks(),  ;;  - shots for ship in the right
    tasks(),  ;;  - shots for ship in the right
]

;;;
;; Declares and spawns the game objects:
;;  - Meteors live in a dynamic pool of tasks and are spawned periodically.
;;  - Ships are fixed and held in a tuple pair.
;;  - Shots live in dynamic pools, one for each ship, which are held in a
;;    tuple pair.
;; Pools control the lifecycle of tasks by releasing them from memory
;; automatically on termination. Tasks in pools are anonymous and can only
;; be accessed through iterators or reference tracks.
;;;

val meteors = tasks()   ;; holds all spawned meteors

val shots = [           ;; holds all spawned shots, limited to a maximum
    tasks(SHIP-SHOTS),  ;;  - shots for ship in the left
    tasks(SHIP-SHOTS),  ;;  - shots for ship in the right
]

    val pos = [         ;; positions for each ship
        0.1 || 0.5,     ;; left  of the screen
        0.9 || 0.5,     ;; right of the screen
    ]
    val ctl = [         ;; key controls for each ship
        [[:Key-A,    :Key-D,     :Key-W,  :Key-S],    :Key-Shift-Left],
        [[:Key-Left, :Key-Right, :Key-Up, :Key-Down], :Key-Shift-Right],
    ]

val ships = [           ;; holds the two ships
    spawn Ship(:T.Ship.L, pos[0], ctl[0], shots[0], "imgs/ship-L.gif"),
    spawn Ship(:T.Ship.R, pos[1], ctl[1], shots[1], "imgs/ship-R.gif"),
] ;;where { }

watching |((it==ships[0]) or (it==ships[1])) {     ;; GAMEPLAY
    ;;;
    ;; Runs the gameplay until one of the two ships is destroyed:
    ;;  - Spawns new meteors periodically.
    ;;  - Checks collisions between all objects.
    ;;;
    par {                   ;; METEORS
        ;;;
        ;; Spawns new meteros in the game every period:
        ;;  - Hold them in the outer pool.
        ;;  - Gradually decreases the spawning period.
        ;;;
        var period = METEOR-MS;
        loop {
            val dt = random.int(1, period)
            await <dt:ms>
            spawn Meteor() in meteors
        }
    } with {
        every :Pico.Frame { ;; COLLISIONS
            ;;;
            ;; Checks collisions between objects:
            ;;  1. Uses `to.vector` to collect all references to dinamically
            ;;     allocated ships, shots, and meteors.
            ;;  2. Uses `pico-collisions` to get all pairs of colliding
            ;;     objects, using the `f-cmp` comparator which relies on `:T`
            ;;     rect.
            ;;  3. Iterates over the pairs, ignores innocuous collisions, and
            ;;     collects final colliding objects.
            ;;  4. Signals colliding objects.
            ;; A ship collision will eventually terminate the enclosing
            ;; `watching`, also terminating the current battle.
            ;;;

            val tsks =      ;; (1)
                to.vector(ships)    <++
                to.vector(shots[0]) <++
                to.vector(shots[1]) <++
                to.vector(meteors)

            val pairs =     ;; (2)
                pico.collisions(tsks,f-cmp) where {
                    func f-cmp (p1:T, p2:T) {
                        pico.rect-vs-rect?(p1.rect, p2.rect)
                    }
                }

            val fins = #[] ;; (3)
            loop ts in pairs {
                val col? = do {
                    val t0 = ts[0].pub
                    val t1 = ts[1].pub
                    ifs {
                        (t0 is? :T.Ship.R) and (t1 is? :T.Shot.R) => false
                        (t0 is? :T.Shot.R) and (t1 is? :T.Ship.R) => false
                        (t0 is? :T.Ship.L) and (t1 is? :T.Shot.L) => false
                        (t0 is? :T.Shot.L) and (t1 is? :T.Ship.L) => false
                        (t0 is? :T.Meteor) and (t1 is? :T.Meteor) => false
                        else => true
                    }
                }
                if col? {
                    set fins[+] = ts[0]
                    set fins[+] = ts[1]
                }
                until col?
            }

            loop j in fins { ;; (4)
                broadcast(:collided) in j
            }
        }
    }
}

match :terminated {       ;; BATTLE RESULT
    ;;;
    ;; Returns the winner index to the main game loop:
    ;;  - 1, if ship[0] is dead
    ;;  - 0, if ship[1] is dead
    ;;;
    == status(ships[0]) => 1
    == status(ships[1]) => 0
    else => error(:error)
}
