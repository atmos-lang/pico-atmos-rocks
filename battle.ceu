data :T = [rect:Rect] {
    :Ship = [] {
        :L = []
        :R = []
    }
    :Fire = [] {
        :L = []
        :R = []
    }
    :Rock = []
}

task Move-T (rect:Rect, vel:XY) {
    awaiting out-of-screen() {
        every :Pico.Frame {
            val dt = evt.ms / 1000
            set rect.pos.x = rect.pos.x + (vel.x * dt)
            set rect.pos.y = rect.pos.y + (vel.y * dt)
        }
    } where {
        func out-of-screen () {
            ifs {
                rect.pos.x < -(WIN.w/2) -> true
                rect.pos.x >  (WIN.w/2) -> true
                rect.pos.y < -(WIN.h/2) -> true
                rect.pos.y >  (WIN.h/2) -> true
                else -> false
            }
        }
    }
}

do :unnest {                ;; SHIPS
    ;;;
    ;; - Creates the two ships.
    ;; They differ in ids (:ship-1 vs :ship-2), initial positions,
    ;; screen limits, key controllers, and image orientations
    ;; (i.e., pointing :R or :L).
    ;;;
    ^["ship.ceu"]

    val fires-1 = tasks(SHIP-FIRES)
    val ship-1 = spawn Ship(:L, pos-1, ctl-1, fires-1, "imgs/ship-1.gif")
        where {
            val pos-1 = [(-WIN.w/2)+(WIN.w/10), 0]
            val ctl-1 = [[:Key-A,:Key-D,:Key-W,:Key-S], :Key-Shift-Left]
        }

    val fires-2 = tasks(SHIP-FIRES)
    val ship-2 = spawn Ship(:R, pos-2, ctl-2, fires-2, "imgs/ship-2.gif")
        where {
            val pos-2 = [( WIN.w/2)-(WIN.w/10), 0]
            val ctl-2 = [[:Key-Left,:Key-Right,:Key-Up,:Key-Down], :Key-Shift-Right]
        }
}

;;;
;; - All dynamically spawned meteors, bonuses, and bombs reside in 
;;   this pool.
;;;
val rocks = tasks()
^["rocks.ceu"]

;;;
;; - The game innermost "awaiting" terminates when either of the two
;;   ships is destroyed.
;; - We then proceed to increment the points before restarting the
;;   outer loop for the next battle.
;;;

awaiting (evt==ship-1) or (evt==ship-2) {
    ;;;
    ;; - Spawns new meteros in the game.
    ;; It starts with 2s but goes down continuously.
    ;; The "spawn" creates a dynamic instance of "Rock-Big".
    ;; All instances are limited to the closest outer "do-end" 
    ;; block (in this case, the "battle block").
    ;; When the block terminates, all instances are automatically 
    ;; destroyed, i.e., when one of the ships is destroyed, the 
    ;; "battle block" will restart and all meteors will be 
    ;; automatically destroyed.
    ;;;
    spawn {
        var period = ROCK-MS;
        every (random-next() % period) :ms {
            set period = max(50, period - 10)
            spawn in rocks, Rock-Big()
        }
    }

    func f-cmp (p1:T, p2:T) {
        pico-rect-vs-rect?(p1.rect, p2.rect)
    }

    ;;;
    ;; - Collision detection loop:
    ;;  - "$objs" is the number of alive objects.
    ;;  - "objs"  contains references to them.
    ;; We iterate over "objs" to check for collisions between "o1" 
    ;; vs "o2" for every possible pairs of objects.
    ;; Then, we check each "id" in the collisions to take the 
    ;; proper action.
    ;;;
    every :Pico.Frame {
        val trks = to-tracks(ship-1, fires-1, ship-2, fires-2, rocks)
        val cols = pico-collisions(f-cmp, trks)
        val cols' = @[]
        while in :vector cols, (_,col) {
            val col? = do {
                val t0 = detrack(col.0).pub
                val t1 = detrack(col.1).pub
                ifs {
                    (t0 is :T.Ship.R) and (t1 is :T.Fire.R) -> false
                    (t0 is :T.Fire.R) and (t1 is :T.Ship.R) -> false
                    (t0 is :T.Ship.L) and (t1 is :T.Fire.L) -> false
                    (t0 is :T.Fire.L) and (t1 is :T.Ship.L) -> false
                    (t0 is :T.Rock)   and (t1 is :T.Rock)   -> false
                    else -> true
                }
            }
            if col? {
                set cols'[col.0] = true
                set cols'[col.1] = true
            }
        }
        while in :dict cols', (k,_1) {
            broadcast in detrack(k), :collided
        }
    }
}
ifs {
    (ship-1.status == :terminated) -> set points-2 = to-string(to-number(points-2)+1)
    (ship-2.status == :terminated) -> set points-1 = to-string(to-number(points-1)+1)
}

