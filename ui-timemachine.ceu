#include "sdl.ceu"
#include "sdl-gfx.ceu"

input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN_;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP_;
input _SDL_MouseMotionEvent* SDL_MOUSEMOTION_;

native do
    #define TEX_N 6
    SDL_Texture* TEX_FIRST   = NULL;
    SDL_Texture* TEX_REWIND  = NULL;
    SDL_Texture* TEX_PAUSE   = NULL;
    SDL_Texture* TEX_PLAY    = NULL;
    SDL_Texture* TEX_FORWARD = NULL;
    SDL_Texture* TEX_LAST    = NULL;
    SDL_Texture* TEXS[TEX_N];
end

finalize
   _TEX_FIRST = _IMG_LoadTexture(_REN, "tm/first.png");
with
   _SDL_DestroyTexture(_TEX_FIRST);
end
finalize
   _TEX_REWIND = _IMG_LoadTexture(_REN, "tm/rewind.png");
with
   _SDL_DestroyTexture(_TEX_REWIND);
end
finalize
   _TEX_PAUSE = _IMG_LoadTexture(_REN, "tm/pause.png");
with
   _SDL_DestroyTexture(_TEX_PAUSE);
end
finalize
   _TEX_PLAY = _IMG_LoadTexture(_REN, "tm/play.png");
with
   _SDL_DestroyTexture(_TEX_PLAY);
end
finalize
   _TEX_FORWARD = _IMG_LoadTexture(_REN, "tm/forward.png");
with
   _SDL_DestroyTexture(_TEX_FORWARD);
end
finalize
   _TEX_LAST = _IMG_LoadTexture(_REN, "tm/last.png");
with
   _SDL_DestroyTexture(_TEX_LAST);
end
_assert(_TEX_FIRST   != null);
_assert(_TEX_REWIND  != null);
_assert(_TEX_PAUSE   != null);
_assert(_TEX_PLAY    != null);
_assert(_TEX_FORWARD != null);
_assert(_TEX_LAST    != null);
_TEXS[0] = _TEX_FIRST;
_TEXS[1] = _TEX_REWIND;
_TEXS[2] = _TEX_PAUSE;
_TEXS[3] = _TEX_PLAY;
_TEXS[4] = _TEX_FORWARD;
_TEXS[5] = _TEX_LAST;

class UITimeMachine with
    var TimeMachine& tm;

    event void go_on, go_off;
    event void ok_restart;

    event void go_redraw;
do
    var int ren_w, ren_h;
    _SDL_GetRendererOutputSize(_REN, &ren_w, &ren_h);
    var int x = ren_w/6;
    var int w = ren_w - x*2;
    var int h = ren_h/80;
    var int y = ren_h - h*4;

    var _SDL_Rect r;
        r.x = x;
        r.y = y;
        r.w = w;
        r.h = h;

    var _SDL_Rect rc;
        rc.w = w*2 / 3;
        rc.x = ren_w/2 - rc.w/2;
        rc.y = y - ren_h/10 - ren_h/80;
        rc.h = ren_h/10;

    var _SDL_Rect[_TEX_N] rcs;
    do
        var int dx = rc.w / (_TEX_N+1);
        loop i in _TEX_N do
            var _SDL_Rect ri;
            _SDL_QueryTexture(_TEXS[i], null, null, &ri.w, &ri.h);
            ri.x = rc.x + (i+1)*dx - ri.w/2;
            ri.y = rc.y + (rc.h-ri.h)/2;
            rcs[i] = ri;
        end
    end

    loop do
        await this.go_on;
        var int bk_speed = -4;
        var int fw_speed = -4;
        par/or do
            await this.go_off;
        with
            loop do
                var _SDL_MouseButtonEvent* e = await SDL_MOUSEBUTTONDOWN_
                                               until _SDL_Rect_vs_Mouse(&r,e);
                emit tm.go_seek => (tm.time_total * (e:x-x) / (float)w);
                bk_speed = -4;
                fw_speed = -4;
                watching SDL_MOUSEBUTTONUP_ do
                    every SDL_MOUSEMOTION_ do
                        var int x_,y_;
                        _SDL_GetMouseState(&x_, &y_);
                        do
                            var int to = (tm.time_total * (x_-x) / (float)w);
                            if to < 0 then
                                to = 0;
                            else/if to > tm.time_total then
                                to = tm.time_total;
                            end
                            emit tm.go_seek => to;
                        end
                    end
                end
            end
        with
            loop do
                var _SDL_MouseButtonEvent* e = await SDL_MOUSEBUTTONDOWN_;
                var int i = -1;
                loop ii in _TEX_N do
                    if _SDL_Rect_vs_Mouse(&rcs[ii], e) then
                        i = ii;
                        break;
                    end
                end
                e = await SDL_MOUSEBUTTONUP_;
                if _SDL_Rect_vs_Mouse(&rcs[i], e) then
                    if i == 0 then                          // FIRST
                        emit tm.go_seek => 0;
                    else/if i == 1 then                     // REWIND
                        emit tm.go_backward => bk_speed;
                        bk_speed = bk_speed + 1;
                        if bk_speed == 0 then
                            bk_speed = 1;   // skip seek speed 0
                        end
                    else/if i == 2 then                     // PAUSE
                        emit tm.go_pause;
                    else/if i == 3 then                     // PLAY
                        emit tm.go_forward => 1;
                    else/if i == 4 then                     // FORWARD
                        emit tm.go_forward => fw_speed;
                        fw_speed = fw_speed + 1;
                        if fw_speed == 0 then
                            fw_speed = 1;   // skip seek speed 0
                        end
                    else/if i == 5 then                     // LAST
                        emit tm.go_forward => 0;
                    end
                    if i != 1 then
                        bk_speed = -4;  // reset fw_speed for other clicks
                    end
                    if i != 4 then
                        fw_speed = -4;  // reset fw_speed for other clicks
                    end
                end
            end
        with
            every this.go_redraw do
                do
                    var int dx = tm.time_now/(float)tm.time_total * w;
                    _boxRGBA(_REN, x, y, x+w, y+h,
                                   0x88,0x88,0x88,0x88);
                    _filledCircleRGBA(_REN, x+dx-h/2, y+h/2, h,
                                            0xFF,0xFF,0xFF,0x88);
                end
                do
                    _boxRGBA(_REN, rc.x, rc.y, rc.x+rc.w, rc.y+rc.h,
                             0xAA,0xAA,0xAA,0xAA);
                    loop i in _TEX_N do
                        _SDL_RenderCopy(_REN, _TEXS[i], null, &rcs[i]);
                    end
                end
            end
        end
    end
end
