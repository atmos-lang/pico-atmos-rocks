var ACC_DIV = 3000
var FRAMES  = 4
var MAX     = [win.0/200, win.1/200]

func between (MIN, MAX, v) {
    max(MIN, min(MAX, v))
}

task Control (mov) {
    var key
    set pub = @[
        acc = @[x=0,y=0],
        toframe = func () {
            ifs key {
                is mov.left  -> 0
                is mov.right -> 1
                is mov.up    -> 2
                is mov.down  -> 3
                else -> 0
            }
        },
    ]
    par {
        every :keydown {
            ifs evt.1 {
                is mov.left  -> set pub.acc.x = -win.0/ACC_DIV
                is mov.right -> set pub.acc.x =  win.0/ACC_DIV
                is mov.up    -> set pub.acc.y =  win.1/ACC_DIV
                is mov.down  -> set pub.acc.y = -win.1/ACC_DIV
            }
            set key = evt.1
        }
    } with {
        every :keyup {
            set key = nil
            set pub.acc = [0,0]
        }
    }
}

task Ship (id, path, dir, pos, lims, control) {
    var size = pico_state_get_size_image(path)
    var vel = [0,0]
    par {
        every :draw {
            do {
                pico_state_set_image_crop(0,frame*dy,size.0,dy)
                pico_output_draw_image(pos.0,pos.1, path)
            } where {
                var dy = size.1 / FRAMES
                var frame = control.pub.toframe()
            }
        }
    } with {
        every :frame {
            set vel.0 = between(-MAX.0, MAX.0, vel.0 + control.pub.acc.x)
            set vel.1 = between(-MAX.1, MAX.1, vel.1 + control.pub.acc.y)
            set pos.0 = pos.0 + vel.0
            set pos.1 = pos.1 + vel.1
        }
    }
}
