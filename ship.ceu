var ACC-DIV = 3000
var SHIP-FRAMES = 4
var MAX :XY = [win.w/200, win.h/200]

func between (MIN, MAX, v) {
    max(MIN, min(MAX, v))
}

task Control (mov) {
    var key
    set task.pub = @[
        acc = @[x=0,y=0],
        toframe = func (dir) {
            ifs key {
                is mov.left  -> ((dir==:right) and 0) or 1
                is mov.right -> ((dir==:left)  and 0) or 1
                is mov.up    -> 2
                is mov.down  -> 3
                else -> 0
            }
        },
    ]
    par {
        every :Pico.Key.Dn {
            ifs evt.key {
                is mov.left  -> set task.pub.acc.x = -win.w/ACC-DIV
                is mov.right -> set task.pub.acc.x =  win.w/ACC-DIV
                is mov.up    -> set task.pub.acc.y =  win.h/ACC-DIV
                is mov.down  -> set task.pub.acc.y = -win.h/ACC-DIV
            }
            set key = evt.key
        }
    } with {
        every :Pico.Key.Up {
            set key = nil
            set task.pub.acc = @[x=0,y=0]
        }
    }
}

task Ship (id, path, dir, pos:XY, control) :Rect {
    var dim:WH = pico-state-get-size-image(path)
    var vel:XY = [0,0]
    var dy = dim.h / SHIP-FRAMES
    set task.pub = [pos, [dim.w,dy]]

    par-or {
        await :collided
    } with {
        every :Pico.Draw {
            pico-state-set-image-crop([[0,frame*dy],[dim.w,dy]])
                where {
                    var frame = control.pub.toframe()
                }
            pico-output-draw-image(pos, path)
        }
    } with {
        every :Pico.Frame {
            set vel.x = between(-MAX.x, MAX.x, vel.x+control.pub.acc.x)
            set vel.y = between(-MAX.y, MAX.y, vel.y+control.pub.acc.y)
            set pos.x = if dir==:right {
                            between((-win.w/2)+dim.w, 0-dim.w, pos.x+vel.x)
                        } else {
                            between(0+dim.w,  (win.w/2)-dim.w, pos.x+vel.x)
                        }
            set pos.y = between((-win.h/2)+dy, (win.h/2)-dy, pos.y+vel.y)
        }
    }
}
