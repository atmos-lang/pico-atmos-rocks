native @nohold _queue_put();
native @pure   _queue_get();

native do
    enum {
        TM_REQ_PAUSE = -1,
    };
end

#ifndef TM_INPUT_DT
#error Missing "TM_INPUT_DT"
#endif
#ifndef TM_INPUT_REDRAW
#error Missing "TM_INPUT_REDRAW"
#endif
#ifndef TM_QUEUE_MAX
#error Missing "TM_QUEUE_MAX"
#endif
#ifdef TM_SNAP
#ifndef TM_SNAP_MS
#error Missing "TM_SNAP_MS"
#endif
#ifndef TM_SNAP_N
#error Missing "TM_SNAP_N"
#endif
#endif

interface IIOTimeMachine with
    event void         go_on;
    event void         go_off;
    event _tceu_queue* go_queue;
end

class TimeMachine with
    var App& app;
    var IIOTimeMachine& io;
    event void go_on, go_off;
    //event void ok_restart;

    event int  go_seek;
    event void go_pause;
    event int  go_backward;
    event int  go_forward;

    var   bool ticking? = false;
    event void ok_tick;
    var   bool seeking? = false;
    event int  ok_seek;
    #define TM_AWAIT_SEEK(me)   \
        if me.ticking? then     \
            await me.ok_tick;   \
        end                     \
        if me.seeking? then     \
            await me.ok_seek;   \
        end

    var int time_total = 0;
    var int time_now;
do
    _QUEUE_get = 0;

    _SNAP_data := (char*) &this.app;
    _SNAP_put = 0;
    _snap_put(_QUEUE_put, this.time_total);     // 0, 0
#ifdef TM_SNAP
    var int next_snap = TM_SNAP_MS;
#endif

    loop do
        watching this.go_on do
            var int dt;
            every dt in TM_INPUT_DT do
                this.time_total = this.time_total + dt;
                _assert(dt >= 0);
                _queue_put(_CEU_IN__WCLOCK, _CEU_EVTP(dt), 0, null);
#ifdef TM_SNAP
                if this.time_total >= next_snap then
                    next_snap = next_snap + TM_SNAP_MS;
                    _snap_put(_QUEUE_put, this.time_total);
                end
#endif
            end
        end

        _CEU_TIMEMACHINE_ON = _CEU_TIMEMACHINE_ON + 1;
        emit this.io.go_on;

        par/or do
            finalize with
                _CEU_TIMEMACHINE_ON = _CEU_TIMEMACHINE_ON - 1;
                this.time_total = time_now;     // drop future
                _QUEUE_put = _QUEUE_get;
                _QUEUE_tot = _QUEUE_get;
#ifdef TM_SNAP
                next_snap = _snap_set(time_now);
#endif
            end
            await this.go_off;
            emit this.io.go_off;
        with
            var int speed = 0;
                // initialization avoids valgrind "uninitalized access" below
            event int e_backward;
            var int time_req = _TM_REQ_PAUSE;
            time_now = this.time_total; // start in the end (the current state)
            _QUEUE_get = _QUEUE_put;

            par do
                loop do
                    par/or do
                        var int tmp = await this.go_seek;
                                    // avoid conflict w/ ongoing time_req
                        TM_AWAIT_SEEK(this);
                        time_req = tmp;
                        this.time_now = _snap_get(time_req);
                        speed = 0;
                        this.seeking? = true;
                        //emit this.ok_restart;
                        //_queue_reset();
                    with
                        await this.go_pause;
                        TM_AWAIT_SEEK(this);
                        time_req = _TM_REQ_PAUSE;
                    with
                        var int s = await this.go_backward;
                        TM_AWAIT_SEEK(this);
                        speed = s;
                        emit e_backward => s;
                        await FOREVER;          // e_backward emits go_seek
                    with
                        var int s = await this.go_forward;
                        TM_AWAIT_SEEK(this);
                        speed    = s;
                        time_req = this.time_total;
                    with
#ifndef TM_DELAY
                        var int late = 0;
#endif
                        //var int prv = 0;
                        loop do
                            if time_req == _TM_REQ_PAUSE then
                                break;  // already there
                            end
                            var int get = _QUEUE_get;
                            var _tceu_queue[] qu = _queue_get();
                            if qu == null then
                                break;
                            end
                            this.ticking? = true;
                            //_assert(qu != null);
                            if qu:evt == _CEU_IN__WCLOCK then
                                var int dt = ((_tceu_queue_dt*)qu):dt;
                                _assert(dt >= 0);
                                if time_now+dt > time_req then
                                    _QUEUE_get = get;   // undo get
/*
_QUEUE_get = prv;
_printf("seek: now=%d get=%d x=%d\n",
    time_now, _QUEUE_get, ((_CEU_App*)&app):r1_7.rect.x);
_queue_dump();
_QUEUE_get = get;
*/
                                    this.ticking? = false;  // (no wait since =true)
                                    break;  // stop before this emission
                                end
                                time_now = time_now + dt;

                                if speed != 0 then
                                    var int awt;
                                    if speed > 0 then
                                        awt = dt/speed;
                                    else //  < 0
                                        awt = dt*-speed;
                                    end
#ifdef TM_DELAY
#error Are you sure?
                                    TM_DELAY(awt);
#else
                                    if awt > late then
                                        late = await (awt-late) ms_;
                                        _assert(late%1000 == 0);
                                        late = late / 1000;
                                    else
                                        late = late - awt;
                                    end
#endif
                                end

                                async(dt) do
                                    emit (dt)ms;
                                    emit TM_INPUT_DT => dt;
                                end
                            else
                                emit io.go_queue => qu;
                            end
                            if speed != 0 then
                                async do
                                    emit TM_INPUT_REDRAW;
                                end
                            end
                            this.ticking? = false;
                            emit this.ok_tick;
                            //prv=get;
                        end
                        async do
                            emit TM_INPUT_REDRAW;
                        end
                        if this.seeking? then
                            this.seeking? = false;
                            emit this.ok_seek => time_now;
                        end
                        await FOREVER;
                    end
                end
            with
                var bool go? = false;
                var int bk_speed;
                loop do
                    var bool me? = false;
                    par/or do
                        // start on this
                        bk_speed = await e_backward;
                        go? = true;
                    with
                        // stop on any of these
                        par/or do
                            await go_seek until (not me?);
                        with
                            await go_pause;
                        with
                            await go_forward;
                        end
                        go? = false;
                    with
                        if not go? then
                            await FOREVER;
                        end
                        var int now = this.time_now;
//_printf("BACK: %d\n", this.time_now);

#ifndef TM_BACKWARD_TICK
#define TM_BACKWARD_TICK 30 // TODO: adaptative
#endif
                        var int awt;
                        if bk_speed > 0 then
                            awt = TM_BACKWARD_TICK/bk_speed;
                        else/if bk_speed < 0 then
                            awt = TM_BACKWARD_TICK*-bk_speed;
                        else
                            _assert(0);
                        end
                        await (awt)ms_;             // first iteration

                        loop i do
                            now = now - TM_BACKWARD_TICK;
                            if now < 0 then
                                now = 0; // one last time to stop exactly at 0
                            end
                            me? = true;
//_printf("back: now=%d get=%d x=%d\n",
    //now, _QUEUE_get, ((_CEU_App*)&app):r1_7.rect.x);
                            emit this.go_seek => now; // don't awake myself (above)
                            me? = false;
                            par/and do
                                await this.ok_seek;
                            with
                                await (awt)ms_;     // other iterations
                            end
                            if now == 0 then
                                break;
                            end
                        end
                        await FOREVER;
                    end
                end
            end
        end
    end

    native do
        typedef struct {
            tceu_nevt evt;
            u8        dt;
        } tceu_queue_dt;
        typedef struct {
            tceu_nevt evt;
            tceu_evtp param;
            s32       sz;
            byte      buf[0];
        } tceu_queue;

        byte QUEUE[TM_QUEUE_MAX];
        u32  QUEUE_tot = 0;
        u32  QUEUE_get = 0;
        u32  QUEUE_put = 0;

        int queue_put (tceu_nevt evt, tceu_evtp param,
                               int sz, byte* buf) {
            int n = (evt==CEU_IN__WCLOCK) ?  sizeof(tceu_queue_dt) :
                                             sizeof(tceu_queue) + sz;
            assert(QUEUE_tot+n <= TM_QUEUE_MAX);

            if (evt == CEU_IN__WCLOCK) {
                tceu_queue_dt* qu = (tceu_queue_dt*) &QUEUE[QUEUE_put];
                qu->evt = evt;
                qu->dt  = param.v;
            } else {
                tceu_queue* qu = (tceu_queue*) &QUEUE[QUEUE_put];
                qu->evt = evt;
                qu->sz  = sz;

                if (sz == 0) {
                    /* "param" is self-contained */
                    qu->param = param;
                } else {
                    /* "param" points to "buf" */
                    qu->param.ptr = qu->buf;
                    memcpy(qu->buf, buf, sz);
                }
            }

            QUEUE_put += n;
            QUEUE_tot += n;

            return 1;
        }

        tceu_queue* queue_get (void) {
            if (QUEUE_get == QUEUE_put) {
                return NULL;
            } else {
                assert(QUEUE_tot > 0);
                tceu_queue* qu = (tceu_queue*) &QUEUE[QUEUE_get];
                if (qu->evt == CEU_IN__WCLOCK) {
                    QUEUE_get += sizeof(tceu_queue_dt);
                } else {
                    QUEUE_get += sizeof(tceu_queue) + qu->sz;
                }
                return qu;
            }
        }

/*
        void queue_dump (void) {
            int i;
            int DT = 0;
            for (i=0; i<=QUEUE_get;) {
                tceu_queue* qu = (tceu_queue*) &QUEUE[i];
                if (qu->evt == CEU_IN__WCLOCK) {
                    printf("[%d:%d] ", i, ((tceu_queue_dt*)qu)->dt);
                    DT += ((tceu_queue_dt*)qu)->dt;
                    i += sizeof(tceu_queue_dt);
                } else {
                    printf("[%d:%d] ", i, -1);
                    i += sizeof(tceu_queue) + qu->sz;
                }
            }
            printf("\n==>%d\n", DT);
        }
*/

        /**********************************************************************/

#ifndef TM_SNAP
        #define TM_SNAP_N  1
#endif

        typedef struct {
            CEU_App data;
            u32     time;
            u32     queue;
        } tceu_snap;

        tceu_snap SNAP[TM_SNAP_N];
        int SNAP_put = 0;
        char* SNAP_data;

        void snap_put (u32 queue, u32 time) {
            assert(SNAP_put < TM_SNAP_N);
            SNAP[SNAP_put].data  = *((CEU_App*)SNAP_data);
            SNAP[SNAP_put].queue = queue;
            SNAP[SNAP_put].time  = time;
            SNAP_put++;
        }

        u32 snap_set (u32 time) {
            int i;
            for (i=0; i<SNAP_put; i++) {
                if (SNAP[i].time > time) {
                    SNAP_put = i;
                    return SNAP[i].time;
                }
            }
#ifdef TM_SNAP
            return SNAP[SNAP_put-1].time + TM_SNAP_MS;
#else
            return 0;
#endif
        }

        u32 snap_get (u32 time) {
            int i;  /* SNAP[0] is guaranteed to succeed */
            for (i=SNAP_put-1; i>=0; i--) {
                if (SNAP[i].time <= time) {
                    *((CEU_App*)SNAP_data) = SNAP[i].data;
                    QUEUE_get = SNAP[i].queue;
                    return SNAP[i].time;
                }
            }
            assert(0);
            return 0;
        }
    end
end
