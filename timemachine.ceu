native do
    enum {
        TM_REQ_PAUSE = -1,
    };
end

#ifndef TM_INPUT_DT
#error Missing "TM_INPUT_DT"
#endif
#ifndef TM_QUEUE_MAX
#error Missing "TM_QUEUE_MAX"
#endif
#ifdef TM_SNAP
#ifndef TM_SNAP_MS
#error Missing "TM_SNAP_MS"
#endif
#ifndef TM_SNAP_N
#error Missing "TM_SNAP_N"
#endif
#endif

#ifndef TM_SNAP_ONLY
interface IIOTimeMachine with
    event void         go_on;
    event void         go_off;
    event _tceu_queue* go_queue;
end
#endif

class Fps with
    event int go;
do
    var int fps = 0;                /* previous FPS */
    loop do
        var int c = 0;              /* reset the current counter */
        var int t;
        watching 10s_ do
            every t in this.go do
                c = c + 1;
            end
        end
        fps = c;
/*
        _printf("[FPS=%d (%ds)]\n", fps, t/10);
        _printf("%d %d\n", t/10, fps);
*/
    end
end

class TimeMachine with
    var App& app;
#ifndef TM_SNAP_ONLY
    var IIOTimeMachine& io;
#endif
    event void go_on, go_off;
    //event void ok_restart;

    event int  go_seek;
    event void go_pause;
    event int  go_backward;
    event int  go_forward;

    var   bool locked  = false;
    var   bool ticking = false;
    event void ok_tick;
    var   bool seeking = false;
    event int  ok_seek;
    #define TM_AWAIT_SEEK(me)   \
        if me.ticking then      \
            await me.ok_tick;   \
        end                     \
        if me.seeking then      \
            await me.ok_seek;   \
        end

    var int time_total = 0;
    var int time_now;
do
    _snap_init((char*) &this.app)
        finalize with
            nothing;    // app is supposed to live longer than TM
        end;

#ifdef TM_SNAP
    var int next_snap = TM_SNAP_MS;
#endif

    loop do
        watching this.go_on do
            var int dt;
            every dt in TM_INPUT_DT do
                this.time_total = this.time_total + dt;
                _assert(dt >= 0);
#ifdef TM_SNAP_ONLY
                _snap_put(this.time_total);
#else

#ifdef TM_SNAP
                var u32 brk_time = 0;
                if this.time_total >= next_snap then
                    brk_time = this.time_total;
                    next_snap = next_snap + TM_SNAP_MS;
                end
                _queue_put(_CEU_IN__WCLOCK, 0, &dt, brk_time)
#else
                _queue_put(_CEU_IN__WCLOCK, 0, &dt)
#endif // TM_SNAP
                    finalize with
                        nothing;
                    end;

#endif // TM_SNAP_ONLY
            end
        end

        _assert(_CEU_TIMEMACHINE_ON == 0);
        _CEU_TIMEMACHINE_ON = 1;

#ifndef TM_SNAP_ONLY
        emit this.io.go_on;
#endif

        par/or do
            finalize with
                _CEU_TIMEMACHINE_ON = 0;
                this.time_total = time_now;     // drop future
#ifdef TM_SNAP_ONLY
                _snap_drop(time_now);
#else
                _queue_drop();
#ifdef TM_SNAP
                next_snap = _snap_drop(time_now);
#endif
#endif
            end
            await this.go_off;
            TM_AWAIT_SEEK(this);
#ifndef TM_SNAP_ONLY
            emit this.io.go_off;
#endif
        with
            var int speed = 0;
                // initialization avoids valgrind "uninitalized access" below
            event int e_backward;
            var int time_req = _TM_REQ_PAUSE;
            time_now = this.time_total; // start in the end (the current state)

#ifdef TM_SNAP_ONLY
            _snap_toend();
#else
            _queue_toend();
#endif

            var Fps fps;

            par do
                loop do
                    par/or do
                        var int tmp = await this.go_seek;
                                    // avoid conflict w/ ongoing time_req
                        TM_AWAIT_SEEK(this);
                        time_req = tmp;
                        this.time_now = _snap_set(time_req);    // resets queue
                        speed = 0;
                        this.seeking = true;
                        //emit this.ok_restart;
                    with
                        await this.go_pause;
                        TM_AWAIT_SEEK(this);
                        time_req = _TM_REQ_PAUSE;
                    with
                        var int s = await this.go_backward;
                        TM_AWAIT_SEEK(this);
                        speed = s;
                        emit e_backward => s;
                        await FOREVER;          // e_backward emits go_seek
                    with
                        var int s = await this.go_forward;
                        TM_AWAIT_SEEK(this);
                        speed    = s;
                        time_req = this.time_total;
                    with
#ifndef TM_DELAY
                        var int late = 0;
#endif
                        //var int prv = 0;
                        loop do
                            if time_req == _TM_REQ_PAUSE then
                                break;  // already there
                            end
                            var int dt = 0;

#ifdef TM_SNAP_ONLY
                            var u32 time = _snap_get();
                            if time == 0 then
                                break;
                            else/if time > time_req then
                                _snap_unget();
                                break;
                            end
                            dt = time - time_now;
                            time_now = time;

#else   // TM_SNAP_ONLY

                            var _tceu_queue&? qu;
                            finalize
                                qu = _queue_get();
                            with
                                nothing;
                            end
                            if not qu? then
                                break;
                            end
                            this.ticking = true;

                            if qu.evt == _CEU_IN__WCLOCK then
#ifdef TM_QUEUE_WCLOCK_REUSE
                                dt = (1000/_CEU_FPS);
#else
                                dt = ((_tceu_queue_dt*)&qu):dt;
#endif
                                _assert(dt >= 0);
                                if time_now+dt > time_req then
                                    _queue_unget();  // undo get
                                    this.ticking = false;  // (no wait since =true)
                                    break;  // stop before this emission
                                end
                                time_now = time_now + dt;
                                this.locked = true;
                                async(dt) do
                                    emit (dt)ms;
                                    emit TM_INPUT_DT => dt;
                                end
                                this.locked = false;
                            else
                                emit io.go_queue => &qu;
                            end
#endif  // TM_SNAP_ONLY

                            if speed != 0 then
                                if dt > 0 then
                                    var int awt;
                                    if speed > 0 then
                                        awt = dt/speed;
                                    else //  < 0
                                        awt = dt*-speed;
                                    end
#ifdef TM_DELAY
#error Are you sure?
                                    TM_DELAY(awt);
#else
                                    if awt > late then
                                        late = await (awt-late) ms_;
                                        _assert(late%1000 == 0);
                                        late = late / 1000;
                                    else
                                        late = late - awt;
                                    end
#endif
                                end

#ifdef TM_INPUT_REDRAW
                                this.locked = true;
                                emit fps.go => time_now;
                                async do
                                    emit TM_INPUT_REDRAW;
                                end
                                this.locked = false;
#endif
                            end

                            this.ticking = false;
                            emit this.ok_tick;
                            //prv=get;
                        end
                        this.locked = true;

                        // this async is forced to ensure at least one sync 
                        // break (even if there's no REDRAW event)
                        emit fps.go => time_now;
                        async do
#ifdef TM_INPUT_REDRAW
                            emit TM_INPUT_REDRAW;
#endif
                        end
                        this.locked = false;
                        if this.seeking then
                            this.seeking = false;
                            emit this.ok_seek => time_now;
                        end
                        await FOREVER;
                    end
                end
            with
                var bool go = false;
                var int bk_speed;
                loop do
                    var bool me = false;
                    par/or do
                        // start on this
                        bk_speed = await e_backward;
                        go = true;
                    with
                        // stop on any of these
                        par/or do
                            await go_seek until (not me);
                        with
                            await go_pause;
                        with
                            await go_forward;
                        end
                        go = false;
                    with
                        if not go then
                            await FOREVER;
                        end
                        var int now = this.time_now;

#ifndef TM_BACKWARD_TICK
#define TM_BACKWARD_TICK 30 // TODO: adaptative
#endif
                        var int awt;
                        if bk_speed > 0 then
                            awt = TM_BACKWARD_TICK/bk_speed;
                        else/if bk_speed < 0 then
                            awt = TM_BACKWARD_TICK*-bk_speed;
                        else
                            _assert(0);
                        end
                        var int late = await (awt)ms_;       // first iteration

                        loop i do
                            now = now - TM_BACKWARD_TICK;
                            if now < 0 then
                                now = 0; // one last time to stop exactly at 0
                            end
                            me = true;
                            emit this.go_seek => now; // don't awake myself (above)
                            me = false;
                            par/and do
                                await this.ok_seek;
                                async do end;           // TODO: forced
                            with
                                late = late/1000;
                                var int tot = (awt-late);
                                if tot > 0 then
                                    late = await (awt-late)ms_;  // other iterations
                                else
                                    late = (late-awt)*1000;
                                end
                            end
                            if now == 0 then
                                break;
                            end
                        end
                        await FOREVER;
                    end
                end
            end
        end
    end

#ifndef TM_SNAP_ONLY

    native @plain _tceu_queue;
    native/pre do
        typedef struct {
            tceu_nevt evt;
#ifdef TM_QUEUE_WCLOCK_REUSE
            u8        n;
#else
            u8        dt;
#endif
        } tceu_queue_dt;

        typedef struct {
            tceu_nevt evt;
            s32       sz;
            byte      buf[0];
        } tceu_queue;
        typedef struct {
            byte buf[TM_QUEUE_MAX];
            u32  tot;
            u32  get;
            u32  unget;
            u32  put;
            u32  put_old;
#ifdef TM_QUEUE_WCLOCK_REUSE
            u8   get_n;
#endif
        } tceu_queue_state;
    end

    native do
        tceu_queue_state QUEUE = {
            {}
            , 0 /*u32  QUEUE_tot     = 0;*/
            , 0 /*u32  QUEUE_get     = 0;*/
            , 0 /*u32  QUEUE_unget   = 0;*/
            , 0 /*u32  QUEUE_put     = 0;*/
#ifdef TM_QUEUE_WCLOCK_REUSE
            , 0 /*u32  QUEUE_put_old = 0;*/
            , 0 /*u8   QUEUE_get_n   = 0;*/
#endif
        };

        void snap_put (u32 time);
        int queue_put (tceu_nevt evt, int sz, void* buf
#ifdef TM_SNAP
                        , u32 brk_time
#endif
                      )
        {
            int n = (evt==CEU_IN__WCLOCK) ?  sizeof(tceu_queue_dt) :
                                             sizeof(tceu_queue) + sz;
            assert(QUEUE.tot+n <= TM_QUEUE_MAX);

#ifdef TM_SNAP
            if (brk_time > 0) {
                snap_put(brk_time);
            }
#endif

            if (evt == CEU_IN__WCLOCK) {
#ifdef TM_QUEUE_WCLOCK_REUSE
                assert(*((s32*)buf) == (1000/CEU_FPS));
                tceu_queue_dt* qo = (tceu_queue_dt*) &QUEUE.buf[QUEUE.put_old];
                if (qo->evt==CEU_IN__WCLOCK && QUEUE.put!=QUEUE.put_old && qo->n<255
#ifdef TM_SNAP
                     && brk_time>0
#endif
                   )
                {
                    /* QUEUE.put==QUEUE.put_old means "break now" (either * before init or after drop */
                    QUEUE.put = QUEUE.put_old;
                    qo->n++;
                    QUEUE.tot -= n;     /* cancel "+=" below */
                } else {
                    tceu_queue_dt* qn = (tceu_queue_dt*) &QUEUE.buf[QUEUE.put];
                    qn->evt = CEU_IN__WCLOCK;
                    qn->n   = 1;
                }
#else
                tceu_queue_dt* qn = (tceu_queue_dt*) &QUEUE.buf[QUEUE.put];
                qn->evt = evt;
                qn->dt  = *((s32*)buf);
#endif
            } else {
                tceu_queue* qn = (tceu_queue*) &QUEUE.buf[QUEUE.put];
                qn->evt = evt;
                qn->sz  = sz;
                memcpy(qn->buf, buf, sz);
            }

#ifdef TM_QUEUE_WCLOCK_REUSE
            QUEUE.put_old = QUEUE.put;
#endif
            QUEUE.put += n;
            QUEUE.tot += n;

            return 1;
        }

        tceu_queue* queue_get (void) {
            if (QUEUE.get == QUEUE.put) {
                return NULL;
            } else {
                assert(QUEUE.tot > 0);
                QUEUE.unget = QUEUE.get;
                tceu_queue* qu = (tceu_queue*) &QUEUE.buf[QUEUE.get];
                if (qu->evt == CEU_IN__WCLOCK) {
#ifdef TM_QUEUE_WCLOCK_REUSE
                    tceu_queue_dt* qu = (tceu_queue_dt*) &QUEUE.buf[QUEUE.get];
                    QUEUE.get_n++;
                    if (QUEUE.get_n == qu->n) {     /* reached last DT */
                        QUEUE.get_n = 0;
                        QUEUE.get += sizeof(tceu_queue_dt);
                    }
#else
                    QUEUE.get += sizeof(tceu_queue_dt);
#endif
                } else {
#ifdef TM_QUEUE_WCLOCK_REUSE
                    QUEUE.get_n = 0;
#endif
                    QUEUE.get += sizeof(tceu_queue) + qu->sz;
                }
                return qu;
            }
        }

        void queue_unget (void) {
#ifdef TM_QUEUE_WCLOCK_REUSE
            if (QUEUE.get_n > 0) {
                tceu_queue_dt* qu = (tceu_queue_dt*) &QUEUE.buf[QUEUE.get];
                assert(qu->evt == CEU_IN__WCLOCK);
                QUEUE.get_n--;                  /* unget */
            } else {
                QUEUE.get = QUEUE.unget;

                /* jump to last DT in a WCLOCK slot */
                tceu_queue_dt* qu = (tceu_queue_dt*) &QUEUE.buf[QUEUE.get];
                if (qu->evt == CEU_IN__WCLOCK) {
                    QUEUE.get_n = qu->n - 1;
                }
            }
#else
            QUEUE.get = QUEUE.unget;
#endif
        }

        void queue_drop (void) {
#ifdef TM_QUEUE_WCLOCK_REUSE
            tceu_queue_dt* qu = (tceu_queue_dt*) &QUEUE.buf[QUEUE.get];
            if (qu->evt == CEU_IN__WCLOCK) {
                if (QUEUE.get_n == 0) {
                                                        /* drop current slot */
                } else {
                    qu->n = QUEUE.get_n;                /* replace with new max */
                    QUEUE.get += sizeof(tceu_queue_dt); /* keep current slot */
                }
            }
            QUEUE.get_n = 0;
#endif
            QUEUE.put
#ifdef TM_QUEUE_WCLOCK_REUSE
                = QUEUE.put_old
#endif
                    = QUEUE.tot
                        = QUEUE.unget
                            = QUEUE.get;
        }

        void queue_toend (void) {
            QUEUE.get = QUEUE.unget = QUEUE.put;
#ifdef TM_QUEUE_WCLOCK_REUSE
            QUEUE.put_old = QUEUE.put;
            QUEUE.get_n = 0;
#endif
        }

        void queue_dump (void) {
            u32 i;
            int DT = 0;
            printf("DUMP: %d\n", QUEUE.tot);
            for (i=0; i<=QUEUE.tot;) {
                tceu_queue* qu = (tceu_queue*) &QUEUE.buf[i];
                if (qu->evt == CEU_IN__WCLOCK) {
#ifdef TM_QUEUE_WCLOCK_REUSE
                    printf("[%3d:%ddt] ", i, ((tceu_queue_dt*)qu)->n);
#else
                    printf("[%3d:%dms] ", i, ((tceu_queue_dt*)qu)->dt);
#endif
                    DT += 1;/*((tceu_queue_dt*)qu)->dt;*/
                    i += sizeof(tceu_queue_dt);
                } else {
                    printf("[%d:%de] ", i, qu->evt);
                    i += sizeof(tceu_queue) + qu->sz;
                }
            }
            printf("\n==>%d\n", DT);
        }
    end

#endif  // TM_SNAP_ONLY

        /* ***************************************************************** */

    native do

#ifndef TM_SNAP
        #define TM_SNAP_N  1
#endif

        typedef struct {
            CEU_App data;
            u32     time;
#ifndef TM_SNAP_ONLY
            u32     queue;
#endif
        } tceu_snap;

        typedef struct {
            tceu_snap buf[TM_SNAP_N];
            int       put;
            char*     data;
#ifdef TM_SNAP_ONLY
            int       get;
#endif
        } tceu_snap_state;

        tceu_snap_state SNAP;

        void snap_put (u32 time) {
            assert(SNAP.put < TM_SNAP_N);
            SNAP.buf[SNAP.put].data  = *((CEU_App*)SNAP.data);
#ifndef TM_SNAP_ONLY
            SNAP.buf[SNAP.put].queue = QUEUE.put_old;
#endif
            SNAP.buf[SNAP.put].time  = time;
            SNAP.put++;
        }

#ifdef TM_SNAP
        u32 snap_drop (u32 time) {
            int i;
            for (i=0; i<SNAP.put; i++) {
                if (SNAP.buf[i].time > time) {
                    SNAP.put = i;
                    return SNAP.buf[i].time;
                }
            }
            return SNAP.buf[SNAP.put-1].time + TM_SNAP_MS;
        }
#endif

        u32 snap_set (u32 time) {
            int i;  /* SNAP[0] is guaranteed to succeed */
            for (i=SNAP.put-1; i>=0; i--) {
                if (SNAP.buf[i].time <= time) {
                    *((CEU_App*)SNAP.data) = SNAP.buf[i].data;
#ifdef TM_SNAP_ONLY
                    SNAP.get = i+1;
#else
                    QUEUE.get = SNAP.buf[i].queue;
#ifdef TM_QUEUE_WCLOCK_REUSE
                    QUEUE.get_n = 0;
#endif
#endif
                    return SNAP.buf[i].time;
                }
            }
            assert(0);
            return 0;
        }

#ifdef TM_SNAP_ONLY
        u32 snap_get (void) {
            if (SNAP.get == SNAP.put) {
                return 0;
            } else {
                tceu_snap* s = &SNAP.buf[SNAP.get];
                *((CEU_App*)SNAP.data) = s->data;
                SNAP.get++;
                return s->time;
            }
        }
        void snap_unget (void) {
            SNAP.get--;
        }
        void snap_toend (void) {
            SNAP.get = SNAP.put;
        }
#endif

        void snap_init (char* data) {
            SNAP.data = data;
            SNAP.put  = 0;
#ifdef TM_SNAP_ONLY
            SNAP.get  = 0;
#endif
            snap_put(0);
        }
    end
end
