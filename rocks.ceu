val ROCKS-FRAMES = 6
val ROCKS-AWAIT  = 5000

func random-signal () {
    (((random-next()%2) == 0) and 1) or -1
}

task Rock-Big () :T {
    val path = "imgs/rock-big.gif"
    val y-sig = random-signal()

    val vx = (1 + (random-next() % (WIN.w/5))) * random-signal()
    val vy = (1 + (random-next() % (WIN.h/5))) * y-sig

    val dim :WH = pico-state-get-size-image(path)
    val w = dim.w / ROCKS-FRAMES
    var dx = 0

    set task.pub = :T.Rock [[[x,y], [w,dim.h]]] where {
        val x = ((random-next() % WIN.w) / 3) * random-signal()
        val y = (WIN.h/2) * -y-sig
    }

    par-or {
        await (random-next() % ROCKS-AWAIT) :ms
        awaiting :collided {
            await spawn Move-T(task.pub.rect, [vx,vy])
        }
        pico-output-sound("snds/rock.wav")
    } with {
        every :Pico.Draw {
            pico-state-set-image-crop([[dx,0],[w,dim.h]])
            pico-output-draw-image(task.pub.rect.pos, path)
        }
    } with {
        val v = ((vx**2) + (vy**2)) ** (1/2)
        var x = 0
        every :Pico.Frame {
            set x = x + ((v * evt.ms) / 1000)
            set dx = (x % dim.w) - (x % task.pub.rect.dim.w)
        }
    }
}
