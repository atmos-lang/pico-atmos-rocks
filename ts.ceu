val SHIP-FRAMES      = 4
val SHIP-ACC-DIV     = 10
val SHIP-VEL-MAX :XY = [WIN.w/2.5, WIN.h/2.5]
val SHOT-DIM         = [WIN.w/50, WIN.h/100]
val SHOT-COLOR       = [0xFF,0xFF,0x88,0xFF]
val METEOR-FRAMES    = 6
val METEOR-AWAIT     = 5000

data :LRUD    = [left,right,up,down]
data :Control = [mov:LRUD, shot]

func random-signal () {
    (((random.next()%2) == 0) and 1) or -1
}

task Meteor () :T {
    val path = "imgs/meteor.gif"
    val y-sig = random-signal()

    val vx = (1 + (random.next() % (WIN.w/5))) * random-signal()
    val vy = (1 + (random.next() % (WIN.h/5))) * y-sig

    val dim :WH = pico-state-get-size-image(path)
    val w = dim.w / METEOR-FRAMES
    var dx = 0

    set pub = :T.Meteor [[[x,y], [w,dim.h]]] where {
        val x = ((random.next() % WIN.w) / 3) * random-signal()
        val y = (WIN.h/2) * -y-sig
    }

    par-or {
        val dt = random.next() % METEOR-AWAIT
        await(:dt:ms)
        par-or {
            await spawn Move-T(pub.rect, [vx,vy])
        } with {
            await(:collided)
            pico-output-sound("snds/meteor.wav")
        }
    } with {
        every :Pico.Draw {
            pico-state-set-image-crop([[dx,0],[w,dim.h]])
            pico-output-draw-image(pub.rect.pos, path)
        }
    } with {
        val v = ((vx**2) + (vy**2)) ** (1/2)
        var x = 0
        every :Pico.Frame {
            set x = x + ((v * it.ms) / 1000)
            set dx = (x % dim.w) - (x % pub.rect.dim.w)
        }
    }
    ;;pub
}

task Shot (tp, pos:XY, vy) :T {
    pico-output-sound("snds/shot.wav")
    set pub = tag(tp, [[pos, SHOT-DIM]])
    par-or {
        await(:collided)
    } with {
        val sig = ((tp==:T.Shot.L) and 1) or -1
        await spawn Move-T(pub.rect, [(WIN.w/3)*sig, vy])
    } with {
        every :Pico.Draw {
            pico-state-set-color-draw(SHOT-COLOR)
            pico-output-draw-rect(pub.rect)
        }
    }
    ;;pub
}

task Ship (tp, pos:XY, ctl:Control, shots, path) :T {
    val dim:WH = pico-state-get-size-image(path)
    val vel:XY = [0,0]
    val dy = dim.h / SHIP-FRAMES
    set pub = tag(tp, [[pos, [dim.w,dy]]])

    var acc:XY = [0,0]
    var key
    spawn {
        par {
            every :Pico.Key.Dn {
                match it.key {
                    == ctl.mov.left  => set acc.x = -WIN.w/SHIP-ACC-DIV
                    == ctl.mov.right => set acc.x =  WIN.w/SHIP-ACC-DIV
                    == ctl.mov.up    => set acc.y =  WIN.h/SHIP-ACC-DIV
                    == ctl.mov.down  => set acc.y = -WIN.h/SHIP-ACC-DIV
                    == ctl.shot      =>
                        (spawn Shot(tp', copy(pos), vel.y) in shots) where {
                            val tp' = ((tp == :T.Ship.L) and :T.Shot.L) or :T.Shot.R
                        }
                }
                set key = it.key
            }
        } with {
            every :Pico.Key.Up {
                set key = nil
                set acc = [0,0]
            }
        }
    }

    par-or {
        await(:collided)
    } with {
        every :Pico.Draw {
            pico-state-set-image-crop([[0,frame*dy],[dim.w,dy]])
                where {
                    val frame = match key {
                        == ctl.mov.left  => ((tp==:T.Ship.L) and 0) or 1
                        == ctl.mov.right => ((tp==:T.Ship.R) and 0) or 1
                        == ctl.mov.up    => 2
                        == ctl.mov.down  => 3
                        else => 0
                    }
                }
            pico-output-draw-image(pos, path)
        }
    } with {
        every :Pico.Frame {
            val dt = it.ms / 1000
            set vel.x = math.between(vel.x+(acc.x*dt), [-SHIP-VEL-MAX.x,SHIP-VEL-MAX.x])
            set vel.y = math.between(vel.y+(acc.y*dt), [-SHIP-VEL-MAX.y,SHIP-VEL-MAX.y])
            set pos.x = if tp == :T.Ship.L
                => math.between(pos.x+(vel.x*dt), [(-WIN.w/2)+dim.w, 0-dim.w])
                => math.between(pos.x+(vel.x*dt), [0+dim.w,  (WIN.w/2)-dim.w])
            set pos.y = math.between(pos.y+(vel.y*dt), [(-WIN.h/2)+dy, (WIN.h/2)-dy])
        }
    }

    pico-output-sound("snds/explosion.wav")
    watching :150:ms {
        var d = dy / 2;
        par {
            every :Pico.Frame {
                set d = d + (((40*d)*it.ms)/1000)
            }
        } with {
            every :Pico.Draw {
                pico-state-set-color-draw([0xFF,0x00,0x00,0xFF])
                pico-output-draw-oval([pos,[d,d]])
            }
        }
    }
}
